---
const { id, columnWidth=300, columnGap=0, maxColumns=null, paddingFunction='flat', maxPadding=50, customColumnLoader=false } = Astro.props
---

<div id={id} class="column-component" data-frontmatter={JSON.stringify({columnWidth, columnGap, maxColumns, paddingFunction, maxPadding, customColumnLoader})}>
  <div class="columns"></div>
  <div class="waiting-room">
    <slot />
  </div>
</div>

<script>
  import $ from 'jquery'

  const paddingFunctions = {
    flat: function(index, total) { return 0 },

    frown: function(index, total) {
      if (total === 1) return 0
      let a = index / (total - 1)
      let frowniness = 1 + 4 * a * (a - 1)
      return (total % 2 == 0) ? (frowniness - (1 + 4 * ((total / 2) / (total - 1)) * ((total / 2) / (total - 1) - 1))) : frowniness
    }
  }

  const columnComponents = $('.column-component')
  let prevNumColumns = 0

  interface JQueryListObject {
    [key: string]: JQuery<HTMLElement>;
  }

  const orderedItems: JQueryListObject = {}

  function labelItems(columnComponent) {
    const id = $(columnComponent).attr('id')
    const items = $(columnComponent).find('.waiting-room > *')
    items.addClass('column-item')
    orderedItems[id] = items
  }

  function moveToWaitingRoom(columnComponent) {
    const waitingRoom = $(columnComponent).find('.waiting-room')
    const items = $(columnComponent).find('.column-item')
    items.appendTo(waitingRoom)
  }

  function createColumns(columnComponent) {
    window.requestAnimationFrame(() => {
      const bodyWidth = $('body').width()
      const columns = $(columnComponent).find('.columns')
      const { columnWidth, columnGap, maxColumns, paddingFunction, maxPadding } = $(columnComponent).data('frontmatter')

      let numColumns = Math.floor((bodyWidth - columnWidth) / (columnWidth + columnGap)) + 1
      if (maxColumns !== null && maxColumns < numColumns) numColumns = maxColumns
      if (numColumns == 0) numColumns = 1
      $(columnComponent).data('numColumns', numColumns)

      if (numColumns !== prevNumColumns) {
        prevNumColumns = numColumns
      
        moveToWaitingRoom(columnComponent)
        columns.empty()
        
        for (let i = 0; i < numColumns; i++) {
          let d = $('<div>', {class: 'column'})
          const padding = (paddingFunctions[paddingFunction](i, numColumns)) * maxPadding
          d.css('padding-top', `${padding}px`)
          d.appendTo(columns)
        }
        columnComponent.dispatchEvent(new Event('columns-created'))
      }
    })
  }

  function loadColumns(columnComponent) {
    const columnArray = $(columnComponent).find('.column')
    const numColumns = columnArray.length
    const { paddingFunction, maxPadding } = $(columnComponent).data('frontmatter')

    const heights = []
    for (let i = 0; i < numColumns; i++) {
      heights.push(paddingFunctions[paddingFunction](i, numColumns) * maxPadding)
    }

    orderedItems[$(columnComponent).attr('id')].each((_, item) => {
      const minIndex = heights.reduce((minIdx, currentValue, currentIndex, arr) => {
        return currentValue < arr[minIdx] ? currentIndex : minIdx
      }, 0)
      $(columnArray[minIndex]).append(item)
      heights[minIndex] += $(item).height()
    })

    columnComponent.dispatchEvent(new Event('columns-loaded'))
  }

  columnComponents.each((idx, columnComponent) => {
    $(columnComponent).on('items-ready', () => {
      labelItems(columnComponent)
      createColumns(columnComponent)
    })
  })
  columnComponents.each((idx, columnComponent) => {
    if (!$(columnComponent).data('frontmatter').customColumnLoader) {
      $(columnComponent).on('columns-created', () => loadColumns(columnComponent))
    }
  })

  $(window).on('resize', () => {
    columnComponents.each((idx, columnComponent) => createColumns(columnComponent))
  })
</script>

<style is:global define:vars={{colWidthStyle: `${columnWidth}px`, colGapStyle: `${columnGap}px`}}>
  .waiting-room {
    display: none;
  }

  .columns {
    display: flex;
    justify-content: center;
    gap: var(--colGapStyle);
  }

  .column {
    flex: 1 0 var(--colWidthStyle);
    height: auto;
  }
</style>