---
import { Image } from 'astro:assets';
import randomOvalPath from "../scripts/clip-paths";
import random from '@src/scripts/random.js'

const { squareness=30, id, classes=[], link, image, format="png", contain, altText, data, style="" } = Astro.props;
const classList = ["oval"]
if (link) classList.push("link");
if (classes) classList.push(...classes);
const classesUsed = classList.join(" ");
const altTextUsed = altText || "";
const objectFit = contain ? "contain" : "cover";
const pathStr = randomOvalPath(squareness);
const pathId = `path-${Math.floor(random(0, 100000))}`;
const pathUrl = 'url(#' + pathId + ')';
---

<span class="oval-container">
  <svg class="oval-clip" viewBox="0 0 100 100" width="0" height="0">
    <clipPath id={pathId} clipPathUnits="objectBoundingBox">
      <path class="oval-path" transform="scale(.01)" d={pathStr}/>
    </clipPath>
  </svg>
  {link ? (
    <div class={classesUsed} id={id} data-data={data} style={style}>
      <a href={link}>
        <div class="oval-link-container">
          {image !== undefined && <Image src={image} alt={altTextUsed} format={format}/>}
          <slot />
        </div>
      </a>
    </div>
  ) : (
    <div class={classesUsed} id={id} data-data={data} style={style}>
      {image !== undefined && <Image src={image} alt={altTextUsed} format={format}/>}
      <slot />
    </div>
  )}
</span>

<style define:vars={{pathUrl, objectFit}}>
  .oval {
    clip-path: var(--pathUrl);
    object-fit: var(--objectFit);
  }

  .oval-link-container {
    width: 100%;
    height: 100%;
  }
</style>
