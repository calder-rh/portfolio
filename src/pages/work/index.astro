---
import WorkItem from "@src/components/WorkItem.astro"
import BaseLayout from "../../layouts/BaseLayout.astro"
import Columns from "@src/layouts/Columns.astro"

import '@src/styles/work.css'

import { getCollection, render } from 'astro:content'
import WorkTag from "@src/components/WorkTag.astro"
import { inferTags } from '@src/scripts/infer-tags.js'

const imageImporters = import.meta.glob('/src/assets/**/*.{jpeg,jpg,png,gif,svg}')
const allWork = await getCollection('work')
const allTags = await getCollection('tags')

const workItems = []

for (let content of allWork) {
  // if (content.data.draft) continue
  const workItem = {
    title: content.data.title,
    description: content.data.description,
    tags: await inferTags(content.data.tags.map(item => item.slug)),
    date: content.data.date,
    priority: content.data.priority,
    draft: content.data.draft === true,
    slug: content.slug,
    images: []
  }
  const { remarkPluginFrontmatter } = await content.render()
  for (let item of remarkPluginFrontmatter.toc) {
    if (item.type === 'image') {
      const previewPath = item.image.preview
      if (previewPath) {
        workItem.images.push({
          url: `/work${content.slug}#${item.id}`,
					img: imageImporters[previewPath](),
          alt: item.alt
        })
      }
    }
  }
  workItems.push(workItem)
}

const tagSorting = {}

const orderedTags = [
  'all',
  'art',
  'design',
  'code',
  'writing-systems',
  'encoding-systems',
  'lettering',
  'type',
  '3d',
  'generative-art',
  'photography',
  'sound'
]

// for (let tag of allTags) {
//   const slug = tag.slug

//   const lowestPriority = Math.max(...Array.from(allWork).map(item => item.data.priority))
//   let itemWeight = 0
//   for (let item of allWork) {
//     if (item.data.draft) continue
//     const tags = await inferTags(item.data.tags.map(tag => tag.slug))
//     if (tags.includes(slug)) itemWeight += lowestPriority + 1 - item.data.priority
//   }
  
//   let numChildren = 0
//   for (let tag of allTags) {
//     const parents = await inferTags([tag.slug])
//     if (parents.includes(slug)) numChildren += 1
//   }

//   tagSorting[slug] = {unlisted: tag.data.unlisted, numChildren, itemWeight}
// }

const sortedTags = Array.from(allTags).sort((a, b) => {
  // const aSorting = tagSorting[a.slug]
  // const bSorting = tagSorting[b.slug]
  if (a.data.unlisted != b.data.unlisted) return b.data.unlisted - a.data.unlisted
  return orderedTags.indexOf(a.slug) - orderedTags.indexOf(b.slug)
  // if (aSorting.numChildren != bSorting.numChildren) return bSorting.numChildren - aSorting.numChildren
  // else return bSorting.itemWeight - aSorting.itemWeight
})

const renderedIntros =  await Promise.all(allTags.map(async (tag) => {
  const { Content } = await render(tag);
  return { slug: tag.slug, content: Content }
}))

---

<BaseLayout title="Work">
  <div id="tags">
    {sortedTags.map(tag => <WorkTag listName={tag.data['listed as'] ?? tag.data.title} titleName={tag.data.title} slug={tag.slug} unlisted={tag.data.unlisted} hideOthers={tag.data['hide others']}></WorkTag>)}
  </div>
  <div id="tag-separator">
    <div id="tag-intro-container">
      <div id="tag-intro-current" />
      <div id="tag-intro-incoming" />
      <div id="tag-intro-waiting-room">
        {renderedIntros.map((item) => 
          <div class="tag-intro " data-slug={item.slug}>
            <item.content />
          </div>
        )}
      </div>
    </div>
    <!-- <p>Hi!</p> -->
  </div>
  <Columns id="work-cols" columnWidth={600} columnGap={20} prepareItems={false} fillColumns={false}>
    {workItems.map((data) => <WorkItem data={data}/>)}
  </Columns>
</BaseLayout>

<script>
  import '@src/scripts/work.js'
</script>